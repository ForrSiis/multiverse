<h1><%= @title = "Advanced Search" %></h1>
<p>Enter one or more strings to search for:</p>
  <% searchable_text_fields = {
      "cardset"      => ["name", "description"],
      "card"         => ["name", "types", "rules_text", "flavour_text", "power", "toughness"],
      "details_page" => ["title", "body"],
      "comment"      => ["body"]
    } 
    frames = [
      "White", "Blue", "Black", "Red", "Green",
      # "White-Blue", "White-Black", "White-Red", "White-Green", "Blue-Black", "Blue-Red", "Blue-Green", "Black-Red", "Black-Green", "Red-Green",
      "Colourless", "Multicolour", "Hybrid",
      "Artifact", "Land", "Planeswalker",
      "Plane", "Scheme", # "Vanguard",
    ]
    dropdowns = {
      "card" => {
        "frame" => frames.zip(frames.map {
            |s| s.downcase.gsub /[^a-z]/, ""
          })
      }
    }
    restrictions = {
      "cardset"      => ["user"],
      "card"         => ["user", "cardset"],
      "details_page" => [],
      "comment"      => ["user", "cardset"]
    }
    text_fields_order = ["cardset", "details_page", "card", "comment"]
    
   valid_cardsets = Cardset.includes(:configuration).select { |cs| permission_to?(:view, cs) }
   valid_cardsets = valid_cardsets.sort_by &:name 
   valid_users = User.all.sort_by &:name
   default_user = current_user ? current_user.id : ""
    %>
<script language="javascript">
  // handleSearchRestrict: toggle visibility of restriction fields
  function handleSearchRestrict(checkbox) {
    // get reference to related content to display/hide
    var idToShow = checkbox.id.replace(/_check/, "");
    var el = document.getElementById(idToShow);
    var input = el.down("select");
    
    if ( checkbox.checked === true ) {
        el.style.visibility = 'visible';
        input.enable();
    } else {
        el.style.visibility = 'hidden';
        input.disable();
    }
  }
  function handleAllRestricts() {
    $$("input.restriction[type='checkbox']").each(handleSearchRestrict);
  }
  
  // handleSearchRestrictions: get the form fields to match the restrictions
  function handleSearchRestrictions(button, objectName) {
    var form = button.up("form");
    $(form.getElementsByClassName("restriction")).each(function(elem){
      if (!elem.checked) {
        // disable the corresponding input
        
      }
    });
  }
  
  // update checkboxes on document load to handle things like back button causing visible content to be hidden
  document.observe("dom:loaded", handleAllRestricts);
</script>
<table class="advanced_search">
  <% text_fields_order.each_slice(2) do |these_fields| %>
  <tr>
    <% these_fields.each do |object_type| %>
    <td class="search_cell">
      <%= form_tag("/search", :class => "search_form", :method => "get") do %>
        <h3><%= object_type.humanize.pluralize %></h3>
        <% object_field_name = object_type.underscore %>
        <table class="search_fields">
          <% searchable_text_fields[object_type].each do |field| %>
            <% field_name = field.delete("_") %>
            <% input_id = "#{object_field_name}[#{field_name}]" %>
            <tr><td>
              <%= label_tag input_id, field.humanize + ":" %>
            </td><td>
              <%= text_field_tag input_id, field.humanize, :value => 
                params[object_field_name.to_sym] && 
                params[object_field_name.to_sym][field_name.to_sym] %>
            </td></tr>
          <% end %>
          <% dropdowns[object_type] && dropdowns[object_type].each do |field_name, values| %>
            <% input_id = "#{object_field_name}[#{field_name}]" %>
            <tr><td>
              <%= label_tag input_id, field_name.humanize + ":" %>
            </td><td>
              <%= select object_field_name, field_name, options_for_select(values), {include_blank: true}, {class: "search_dropdown"}  %>
            </td></tr>
          <% end %>
          <% if restrictions[object_type].include? "user" %>
            <% restrict_s = "restrict_user_check_#{object_field_name}" 
            visible = params[restrict_s.to_sym] || false
            %>
            <tr><td><%= label_tag restrict_s, "Restrict by user:" %>
            <td><%= check_box_tag restrict_s, "yes", false, :onclick => "handleSearchRestrict(this)", :class => "restriction" %><span id="restrict_user_<%= object_field_name %>" <% if !visible %>style="visibility: hidden;"<% end %>>
              <%= collection_select object_field_name, :user_id, valid_users, :id, :name, :class => "restricted", :disabled => "true", :selected => default_user  %>
            </span>
          <% end %>
          <% if restrictions[object_type].include? "cardset" %>
            <% restrict_s = "restrict_cardset_check_#{object_field_name}" 
            visible = params[restrict_s.to_sym] || false
            %>
            <tr><td><%= label_tag restrict_s, "Restrict by cardset:" %>
            <td><%= check_box_tag restrict_s, "yes", visible, :onclick => "handleSearchRestrict(this)", :class => "restriction" %><span id="restrict_cardset_<%= object_field_name %>" <% if !visible %>style="visibility: hidden;"<% end %>>
            <%= collection_select "#{object_field_name}", :cardset_id, valid_cardsets, :id, :name %>
            </span>
          <% end %>
        </table>
        <%= hidden_field_tag "search_type", object_field_name %>
        <div class="search_submit">
          <div class="button_outer"><div class="button_inner">
            <%= submit_tag "Search #{object_type.titleize.pluralize}", :onclick => "handleSearchRestrictions(this, '#{object_field_name}')" %>
          </div></div>
        </div>
      <% end %>
    </td>
    <% end %>
  </tr>
  <% end %>
</table>